import os
import time


# Custom function to get the current system time in seconds since epoch
def get_epoch_time():
    return int(time.time())


# Custom function to get the current time in a specific format
def get_current_time():
    return time.strftime("%Y-%m-%d %H:%M:%S")


# Custom function to sleep for a given number of seconds
def custom_sleep(seconds):
    time.sleep(seconds)


# Function to get process information using tasklist command
def get_process_info():
    process_info = []

    # Execute tasklist command and capture its output
    tasklist_output = os.popen('tasklist').read()

    # Check if tasklist command executed successfully
    if tasklist_output.strip():  # Check if the output is not empty
        # Parse the output to extract process information
        for line in tasklist_output.split('\n')[3:]:
            parts = line.split()
            if len(parts) >= 4:
                try:
                    pid = int(parts[1])
                    process_info.append({
                        'name': parts[0],
                        'pid': pid,
                        'memory_usage': float(parts[4].replace(',', '')) / 1024  # Memory usage in MB
                    })
                except ValueError:
                    # Skip lines that don't contain valid process information
                    pass
    else:
        print("Error: Unable to fetch process information using tasklist command.")

    return process_info


# Function to profile application and write to a CSV file
def profile_application(interval=1, duration=10):
    end_time = get_epoch_time() + duration
    with open('process_profile.csv', 'w') as csvfile:
        # Write the header row
        csvfile.write('timestamp,name,pid,memory_usage_MB\n')

        while get_epoch_time() < end_time:
            process_info = get_process_info()
            timestamp = get_current_time()
            for info in process_info:
                # Write the data row
                csvfile.write(f'{timestamp},{info["name"]},{info["pid"]},{info["memory_usage"]:.2f}\n')
                print(f"Timestamp: {timestamp}, Process Name: {info['name']}, PID: {info['pid']}, "
                      f"Memory Usage: {info['memory_usage']:.2f} MB")
            custom_sleep(interval)


# Example usage
profile_application(interval=2, duration=30)
